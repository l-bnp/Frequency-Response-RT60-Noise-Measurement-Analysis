function [x, t, X] = gen_tsp3(T, fs, bw, bs, ta, tb)
%
% GEN_TSP3: function to generate and plot TSP signals
%
% TSP stands for "time-stretched pulse". A TSP is a pulse whose magnitude
% spectrum is flat, as in the case of the spectra of an impulse and of
% white noise. The difference is in the phase spectrum, which has a quadratic
% shape in the TSP case, in contrast with the linear phase observed in the
% impulse case and the random phase observed in the white noise case.
% 
% The group delay spectrum, defined as "minus" the derivative of the phase 
% spectrum 
% with respect to the frequency, is therefore linear. This means
% that, in a TSP, each frequency arrives with a delay that changes linearly
% with the value of that frequency.
%
% The sintax of the function gen_tsp2 is as follows:
%
% [x, t] = gen_tsp2(T, fs, bw, bs, ta, tb);
%
% x  -> TSP generated by gen_tsp2
% t  -> time vector associated with x
% T  -> duration of the TSP. The default is 1200ms.
% fs -> sampling frequency (in kHz). The default is 44.1kHz.
% bw -> bandwidth (in kHz) of the TSP. The default is the Nyquist frequency, 
%       i.e. half of the sampling frequency.
% bs -> bandshift (in kHz) of the TSP. The default is 0kHz.
% ta -> starting time of the TSP (in ms). The default is T/10 ms.
% tb -> group delay growing rate (in ms/kHz). The default is 50ms/kHz.
%       Note that, if a TSP with monotonically growing (or decreasing)
%       frequency, is desired, the condition T >= ta + tb*(bs+bw) must 
%	be satisfied.
% 
%       Obs. The duration of the TSP usually becomes longer than T in order
%       to make the number of samples in x equal to a power of 2. This speeds
%       up the computation of the discrete Fourier transform used in the
%	procedure.

%       (Function written by Hani Yehia 31/10/1999)
%
% Set default values
% 
if nargin < 1, T = 1200; elseif isempty(T), T = 1200; end
if nargin < 2, fs = 44.1;elseif isempty(fs),fs=44.1;end
if nargin < 3, bw = fs/2; elseif isempty(bw), bw = fs/2; end
if nargin < 4, bs = 0; elseif isempty(bs); bs = 0; end
if nargin < 5, ta = T/10; elseif isempty(ta), ta = T/10; end
if nargin < 6, tb = 50; elseif isempty(tb), tb = 50; end
%
% Modify ta and tb so that the TSP phase at the Nyquist frequency (i.e. fs/2)
% is a multiple of pi. (This is necessary to make the TSP in the time domain
% a real signal.)
%
ta = round(ta*fs)/fs;
tb = round(tb*fs^2/8)*8/fs^2;
%
% Set the FFT length
%
fft_length = pow2(ceil(log2(fs*T)));
T = fft_length/fs;
%
% Set frequency step and angular frequency values
%
step_f = fs/fft_length;
w1 = 2*pi*(0:step_f:(fs/2)); 
%
% Make the magnitude spectrum of the TSP
%
if (bw == fs/2)
  Mag = ones(1,fft_length);
  Mag1 = Mag(1:length(w1));
else
  power = 12;
  Mag1 = exp(-((w1/(2*pi)-(bw/2+bs))/(bw/2)).^power);
  Mag2 = Mag1(length(w1)-1:-1:2);
  Mag = [Mag1 Mag2];
end
%
% Make the group delay spectrum of the TSP
%
group_delay1 = ta + tb*w1/(2*pi);
group_delay = [group_delay1, -group_delay1(end-1:-1:2)];
% 
% Make the phase spectrum of the TSP
%
Ph1 = -(ta + tb*w1/(4*pi)).*w1;
Ph = [Ph1 -Ph1(end-1:-1:2)];
%
% Make the complex spectrum of the TSP
%
X = Mag.*exp(i*Ph);
%
% Make the TSP in the time domain
%
x = real(ifft(X));	% imag(ifft(X))~=0 due to finite numerical precision
x = x/max(abs(x))*0.98; % normalization
%
% Set time step and time vector 
%
step_t = T/fft_length;
t = 0:step_t:T-step_t;
%
% Plot a figure showing the main characteristics of the TSP generated
%
clf
set(gcf,'units','normalized','position',[0.4 0.02 0.53 0.88]);
subplot(2,2,1)
plot(w1(1:ceil(fft_length/256):end)/(2*pi),Mag1(1:ceil(fft_length/256):end));
set(gca,'xlim',[0 fs/2],'xtick',0:round(fs/8):30,...
	'ylim',[0 1.25],'ytick',0:1,...
	'xlabel',text(0,0,'Frequency (kHz)'),...
	'ylabel',text(0,0,'Normalized Amplitude'),...
	'title',text(0,0,'TSP Magnitude Spectrum'), 'FontSize', 21);
text(0.1,0.85,['Passband = ',num2str(bs,4),'--',num2str(bs+bw,4),'kHz'],...
	'units','normalized', 'FontSize', 21);
subplot(2,2,2)
plot(w1(1:ceil(fft_length/256):end)/(2*pi),...
     group_delay1(1:ceil(fft_length/256):end));
set(gca,'xlim',[0 fs/2],...
	'xtick',0:round(fs/8):30,...
	'ylim',[0, group_delay1(end)]*1.2,...
	'ytick',0:ceil(group_delay1(end)/2)/2:group_delay1(end),...
	'xlabel',text(0,0,'Frequency (kHz)'),...
	'ylabel',text(0,0,'Group Delay (ms)'),...
	'title',text(0,0,'TSP Group Delay Spectrum'), 'FontSize', 21);
text(0.1,0.9,['t0 = ',num2str(ta,4),'ms'],'units','normalized', 'FontSize', 21);
text(0.1,0.8,['t1 = ',num2str(tb,4),'ms/kHz'],'units','normalized', 'FontSize', 21);
subplot(2,1,2)
plot(t,x);
set(gca,'xlim',[0 T],...
	'xtick',0:ceil(T/5):T,...
	'ylim',[min(x) max(x)]*1.1,...
	'xlabel',text(0,0,'Time (ms)'),...
	'ylabel',text(0,0,'Amplitude'),...
	'title',text(0,0,'TSP Signal'), 'FontSize', 21);
end
